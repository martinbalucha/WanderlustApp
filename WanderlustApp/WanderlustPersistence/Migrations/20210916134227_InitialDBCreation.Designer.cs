// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WanderlustPersistence.Infrastructure;

namespace WanderlustPersistence.Migrations
{
    [DbContext(typeof(WanderlustContext))]
    [Migration("20210916134227_InitialDBCreation")]
    partial class InitialDBCreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("WanderlustPersistence.Entity.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("WanderlustPersistence.Entity.Sight", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsUnescoSight")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("TownId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TownId");

                    b.ToTable("Sight");
                });

            modelBuilder.Entity("WanderlustPersistence.Entity.Town", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("RegionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("UserId");

                    b.ToTable("Towns");
                });

            modelBuilder.Entity("WanderlustPersistence.Entity.TraditionalFood", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Recipe")
                        .HasColumnType("text");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserId");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("WanderlustPersistence.Entity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WanderlustPersistence.RegionComponent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("RegionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("RegionId");

                    b.HasIndex("UserId");

                    b.ToTable("Regions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("RegionComponent");
                });

            modelBuilder.Entity("WanderlustPersistence.Entity.Region", b =>
                {
                    b.HasBaseType("WanderlustPersistence.RegionComponent");

                    b.HasDiscriminator().HasValue("Region");
                });

            modelBuilder.Entity("WanderlustPersistence.Entity.Subregion", b =>
                {
                    b.HasBaseType("WanderlustPersistence.RegionComponent");

                    b.Property<long?>("CapitalId")
                        .HasColumnType("bigint");

                    b.HasIndex("CapitalId");

                    b.HasDiscriminator().HasValue("Subregion");
                });

            modelBuilder.Entity("WanderlustPersistence.Entity.Country", b =>
                {
                    b.HasOne("WanderlustPersistence.Entity.User", null)
                        .WithMany("CountriesVisited")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("WanderlustPersistence.Entity.Sight", b =>
                {
                    b.HasOne("WanderlustPersistence.Entity.Town", "Town")
                        .WithMany("Sights")
                        .HasForeignKey("TownId");

                    b.Navigation("Town");
                });

            modelBuilder.Entity("WanderlustPersistence.Entity.Town", b =>
                {
                    b.HasOne("WanderlustPersistence.RegionComponent", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.HasOne("WanderlustPersistence.Entity.User", null)
                        .WithMany("TownsVisited")
                        .HasForeignKey("UserId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("WanderlustPersistence.Entity.TraditionalFood", b =>
                {
                    b.HasOne("WanderlustPersistence.Entity.Country", "Country")
                        .WithMany("TypicalFoods")
                        .HasForeignKey("CountryId");

                    b.HasOne("WanderlustPersistence.Entity.User", null)
                        .WithMany("TraditionalFoodsEaten")
                        .HasForeignKey("UserId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("WanderlustPersistence.RegionComponent", b =>
                {
                    b.HasOne("WanderlustPersistence.Entity.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WanderlustPersistence.Entity.Region", null)
                        .WithMany("Subregions")
                        .HasForeignKey("RegionId");

                    b.HasOne("WanderlustPersistence.Entity.User", null)
                        .WithMany("RegionsVisited")
                        .HasForeignKey("UserId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("WanderlustPersistence.Entity.Subregion", b =>
                {
                    b.HasOne("WanderlustPersistence.Entity.Town", "Capital")
                        .WithMany()
                        .HasForeignKey("CapitalId");

                    b.Navigation("Capital");
                });

            modelBuilder.Entity("WanderlustPersistence.Entity.Country", b =>
                {
                    b.Navigation("Regions");

                    b.Navigation("TypicalFoods");
                });

            modelBuilder.Entity("WanderlustPersistence.Entity.Town", b =>
                {
                    b.Navigation("Sights");
                });

            modelBuilder.Entity("WanderlustPersistence.Entity.User", b =>
                {
                    b.Navigation("CountriesVisited");

                    b.Navigation("RegionsVisited");

                    b.Navigation("TownsVisited");

                    b.Navigation("TraditionalFoodsEaten");
                });

            modelBuilder.Entity("WanderlustPersistence.Entity.Region", b =>
                {
                    b.Navigation("Subregions");
                });
#pragma warning restore 612, 618
        }
    }
}
